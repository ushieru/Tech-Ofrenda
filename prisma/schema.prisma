// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  COMMUNITY_LEADER
  SPEAKER
  ATTENDEE
  COLLABORATOR
}

enum EventCategory {
  MEETUP
  HACKATHON
  CONFERENCE
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

enum SponsorLevel {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum CollaboratorRole {
  ORGANIZER
  VOLUNTEER
  TECHNICAL_SUPPORT
  MARKETING
}

enum ContributionType {
  MONETARY
  IN_KIND
}

// Models
model UserGroup {
  id        String   @id @default(cuid())
  name      String
  city      String   @unique
  leaderId  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  leader       User          @relation("UserGroupLeader", fields: [leaderId], references: [id])
  members      User[]        @relation("UserGroupMembers")
  events       Event[]
  sponsors     Sponsor[]
  collaborators Collaborator[]

  @@map("user_groups")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  role      UserRole
  userGroupId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userGroup     UserGroup?  @relation("UserGroupMembers", fields: [userGroupId], references: [id])
  ledUserGroup  UserGroup?  @relation("UserGroupLeader")
  attendeeRecords Attendee[]
  speakerRecords  Speaker[]
  collaboratorRecords Collaborator[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Event {
  id          String        @id @default(cuid())
  title       String
  description String
  date        DateTime
  location    String
  capacity    Int
  category    EventCategory
  status      EventStatus   @default(DRAFT)
  userGroupId String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  userGroup     UserGroup      @relation(fields: [userGroupId], references: [id])
  attendees     Attendee[]
  speakers      Speaker[]
  sponsors      Sponsor[]
  collaborators Collaborator[]
  contributions Contribution[]

  @@map("events")
}

model Attendee {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  qrCode    String   @unique
  checkedIn Boolean  @default(false)
  checkedInAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
  @@map("attendees")
}

model Speaker {
  id          String   @id @default(cuid())
  userId      String
  eventId     String
  topic       String?
  bio         String?
  confirmed   Boolean  @default(false)
  invitedAt   DateTime @default(now())
  confirmedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
  @@map("speakers")
}

model Sponsor {
  id           String      @id @default(cuid())
  name         String
  email        String?
  website      String?
  logo         String?
  level        SponsorLevel
  userGroupId  String
  eventId      String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  userGroup UserGroup @relation(fields: [userGroupId], references: [id])
  event     Event?    @relation(fields: [eventId], references: [id])

  @@map("sponsors")
}

model Collaborator {
  id          String           @id @default(cuid())
  userId      String
  eventId     String
  userGroupId String
  role        CollaboratorRole
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  user      User      @relation(fields: [userId], references: [id])
  event     Event     @relation(fields: [eventId], references: [id])
  userGroup UserGroup @relation(fields: [userGroupId], references: [id])

  @@unique([userId, eventId])
  @@map("collaborators")
}

model Contribution {
  id                    String          @id @default(cuid())
  eventId               String
  type                  ContributionType
  amount                Float?          // For monetary contributions
  description           String?         // For in-kind contributions
  donorName             String
  donorEmail            String?
  confirmed             Boolean         @default(false)
  stripePaymentIntentId String?         // For Stripe payment tracking
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  // Relations
  event Event @relation(fields: [eventId], references: [id])

  @@map("contributions")
}